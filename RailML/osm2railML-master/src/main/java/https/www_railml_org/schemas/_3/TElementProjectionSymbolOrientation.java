//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.08.08 at 02:41:02 PM ICT 
//


package https.www_railml_org.schemas._3;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for tElementProjectionSymbolOrientation.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="tElementProjectionSymbolOrientation"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="left"/&gt;
 *     &lt;enumeration value="down"/&gt;
 *     &lt;enumeration value="right"/&gt;
 *     &lt;enumeration value="up"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "tElementProjectionSymbolOrientation")
@XmlEnum
public enum TElementProjectionSymbolOrientation {


    /**
     * icon or symbol turned 90 degrees left
     * 
     */
    @XmlEnumValue("left")
    LEFT("left"),

    /**
     * the icon or symbol is turned 180 degrees
     * 
     */
    @XmlEnumValue("down")
    DOWN("down"),

    /**
     * icon or symbol turned 90 degrees right
     * 
     */
    @XmlEnumValue("right")
    RIGHT("right"),

    /**
     * standard orientation of icon or symbol
     * 
     */
    @XmlEnumValue("up")
    UP("up");
    private final String value;

    TElementProjectionSymbolOrientation(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static TElementProjectionSymbolOrientation fromValue(String v) {
        for (TElementProjectionSymbolOrientation c: TElementProjectionSymbolOrientation.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
