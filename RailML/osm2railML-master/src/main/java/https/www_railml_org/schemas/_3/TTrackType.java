//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.08.08 at 02:41:02 PM ICT 
//


package https.www_railml_org.schemas._3;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for tTrackType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="tTrackType"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="mainTrack"/&gt;
 *     &lt;enumeration value="secondaryTrack"/&gt;
 *     &lt;enumeration value="sidingTrack"/&gt;
 *     &lt;enumeration value="connectingTrack"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "tTrackType")
@XmlEnum
public enum TTrackType {


    /**
     * CH: Hauptgleis (signalisiertes Gleis)
     * CZ: Hlavní kolej
     * DE: durchgehendes Hauptgleis
     * NL: Hoofdspoorweg
     * NO: hovedspor
     * 
     */
    @XmlEnumValue("mainTrack")
    MAIN_TRACK("mainTrack"),

    /**
     * CZ: Spojovací kolej
     * DE: nicht-durchgehendes Hauptgleis
     * NL: Lokaalspoorweg
     * NO: øvrige
     * 
     */
    @XmlEnumValue("secondaryTrack")
    SECONDARY_TRACK("secondaryTrack"),

    /**
     * CH: Nebengleis (nicht-signalisiertes Gleis)
     * CZ: Manipulacní koleje
     * DE: Nebengleis
     * NL: Raccordement
     * NO: Sidespor
     * 
     */
    @XmlEnumValue("sidingTrack")
    SIDING_TRACK("sidingTrack"),

    /**
     * CZ: Kolejová spojka
     * DE: Gleisverbindung
     * NO: øvrige
     * 
     */
    @XmlEnumValue("connectingTrack")
    CONNECTING_TRACK("connectingTrack");
    private final String value;

    TTrackType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static TTrackType fromValue(String v) {
        for (TTrackType c: TTrackType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
